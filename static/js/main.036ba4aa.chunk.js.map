{"version":3,"sources":["components/Dropzone/Dropzone.js","App.js","serviceWorker.js","index.js"],"names":["Dropzone","thumb","display","borderRadius","border","marginBottom","marginRight","width","height","padding","boxSizing","thumbInner","minWidth","overflow","img","useState","files","setFiles","useDropzone","accept","onDrop","acceptedFiles","map","file","index","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","thumbs","style","key","name","src","alt","path","onClick","id","d","filter","f","console","log","handleDelete","useEffect","forEach","revokeObjectURL","className","backgroundColor","flexDirection","flexWrap","marginTop","JSON","stringify","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6MAGe,SAASA,IACtB,IAOMC,EAAQ,CACZC,QAAS,cACTC,aAAc,EACdC,OAAQ,oBACRC,aAAc,EACdC,YAAa,EACbC,MAAO,IACPC,OAAQ,IACRC,QAAS,EACTC,UAAW,cAGPC,EAAa,CACjBT,QAAS,OACTU,SAAU,EACVC,SAAU,UAGNC,EAAM,CACVZ,QAAS,QACTK,MAAO,OACPC,OAAQ,QA7BuB,EAgCPO,mBAAS,IAhCF,mBAgC1BC,EAhC0B,KAgCnBC,EAhCmB,OAkCOC,YAAY,CAClDC,OAAQ,UACRC,OAAQ,SAAAC,GACNJ,EACEI,EAAcC,KAAI,SAACC,EAAMC,GAAP,OAChBC,OAAOC,OAAOH,EAAM,CAClBI,QAASC,IAAIC,gBAAgBN,EAAMC,GACnCA,MAAOA,WAPTM,EAlCyB,EAkCzBA,aAAcC,EAlCW,EAkCXA,cAsBhBC,EAAShB,EAAMM,KAAI,SAAAC,GAAI,OAC3B,yBAAKU,MAAOhC,EAAOiC,IAAKX,EAAKY,MAC3B,yBAAKF,MAAOtB,GACV,yBACEyB,IAAKb,EAAKI,QACVM,MAAOnB,EACPuB,IAAKd,EAAKe,KACVC,QAAS,kBAfI,SAAAC,GACnB,IAAMC,EAAIzB,EAAM0B,QAAO,SAAAC,GACrB,OAAOA,EAAEnB,QAAUgB,KAErBvB,EAASwB,GACTG,QAAQC,IAAIJ,GAUSK,CAAavB,EAAKC,UAEnC,kCAaN,OARAuB,qBACE,kBAAM,WAEJ/B,EAAMgC,SAAQ,SAAAzB,GAAI,OAAIK,IAAIqB,gBAAgB1B,EAAKI,eAEjD,CAACX,IAID,oCACE,iCACE,wBAASc,EAAa,CAAEoB,UAAW,aACjC,2BAAOjB,MAAO,CAAEkB,gBAAiB,WAC/B,0BAAWpB,KACX,gEACoC,oCADpC,uBAMN,iCACE,2BAAOE,MA1FW,CACtB/B,QAAS,OACTkD,cAAe,MACfC,SAAU,OACVC,UAAW,KAuFL,sDACA,6BACCtB,GAEH,+BACE,4BAAQO,QAAS,kBAAMtB,EAAS,MAAhC,uBAGJ,6BACA,gCACE,iCACE,6BAAMsC,KAAKC,UAAUxC,EAAO,KAAM,OC9F7ByC,MARf,WACE,OACE,oCACE,kBAACzD,EAAD,QCKA0D,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BjC,QAAQC,IACN,iHAKEqB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB3B,QAAQC,IAAI,sCAGRqB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACLrC,QAAQqC,MAAM,4CAA6CA,MC3FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDanB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIvC,IAAI2D,kBAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,kBAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BV,OAAOC,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLpC,QAAQC,IACN,oEAvFAwD,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjC1B,QAAQC,IACN,iHAMJmB,EAAgBC,EAAOC,OCtC/BE,I","file":"static/js/main.036ba4aa.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nexport default function Dropzone() {\r\n  const thumbsContainer = {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n    marginTop: 16\r\n  };\r\n\r\n  const thumb = {\r\n    display: \"inline-flex\",\r\n    borderRadius: 2,\r\n    border: \"1px solid #eaeaea\",\r\n    marginBottom: 8,\r\n    marginRight: 8,\r\n    width: 100,\r\n    height: 100,\r\n    padding: 4,\r\n    boxSizing: \"border-box\"\r\n  };\r\n\r\n  const thumbInner = {\r\n    display: \"flex\",\r\n    minWidth: 0,\r\n    overflow: \"hidden\"\r\n  };\r\n\r\n  const img = {\r\n    display: \"block\",\r\n    width: \"auto\",\r\n    height: \"100%\"\r\n  };\r\n\r\n  const [files, setFiles] = useState([]);\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    accept: \"image/*\",\r\n    onDrop: acceptedFiles => {\r\n      setFiles(\r\n        acceptedFiles.map((file, index) =>\r\n          Object.assign(file, {\r\n            preview: URL.createObjectURL(file, index),\r\n            index: index\r\n          })\r\n        )\r\n      );\r\n    }\r\n  });\r\n\r\n  const handleDelete = id => {\r\n    const d = files.filter(f => {\r\n      return f.index !== id;\r\n    });\r\n    setFiles(d);\r\n    console.log(d);\r\n  };\r\n\r\n  const thumbs = files.map(file => (\r\n    <div style={thumb} key={file.name}>\r\n      <div style={thumbInner}>\r\n        <img\r\n          src={file.preview}\r\n          style={img}\r\n          alt={file.path}\r\n          onClick={() => handleDelete(file.index)}\r\n        />\r\n        <br />\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  useEffect(\r\n    () => () => {\r\n      // Make sure to revoke the data uris to avoid memory leaks\r\n      files.forEach(file => URL.revokeObjectURL(file.preview));\r\n    },\r\n    [files]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <div {...getRootProps({ className: \"dropzone\" })}>\r\n          <aside style={{ backgroundColor: \"yellow\" }}>\r\n            <input {...getInputProps()} />\r\n            <p>\r\n              Drag 'n' drop some files here, or <u>click</u> to select files\r\n            </p>\r\n          </aside>\r\n        </div>\r\n      </section>\r\n      <section>\r\n        <aside style={thumbsContainer}>\r\n          <h4>Click image to removed</h4>\r\n          <br />\r\n          {thumbs}\r\n        </aside>\r\n        <aside>\r\n          <button onClick={() => setFiles([])}>Delete all Images</button>\r\n        </aside>\r\n      </section>\r\n      <hr />\r\n      <header>\r\n        <section>\r\n          <pre>{JSON.stringify(files, null, 4)}</pre>\r\n        </section>\r\n      </header>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Dropzone } from \"./components\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Dropzone />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}